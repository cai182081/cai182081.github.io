<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cailiang&#39;s Blog</title>
  
  <subtitle>飞翔的菜鸟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-13T03:02:13.839Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cai182081</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 体系结构</title>
    <link href="http://yoursite.com/2017/10/13/MySQL_%20architecture/"/>
    <id>http://yoursite.com/2017/10/13/MySQL_ architecture/</id>
    <published>2017-10-13T02:12:35.552Z</published>
    <updated>2017-10-13T03:02:13.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-体系结构概述"><a href="#MySQL-体系结构概述" class="headerlink" title="MySQL 体系结构概述"></a>MySQL 体系结构概述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MySQL 由数据库和数据库实例组成，是单进程多线程架构。</div><div class="line">数据库实例：由数据库后台进程/线程以及一个共享内存区组成，共享内存可以被运行的后台进程/线程所共享。</div><div class="line">数据库：物理操作系统文件或者其它文件的集合，在 MySQL 中，数据库文件可以是frm、myd、myi、ibd等结尾的文件，当使用ndb存储引擎时候，不是os文件，是存放于内存中的文件。</div></pre></td></tr></table></figure><h2 id="MySQL-体系结构组成"><a href="#MySQL-体系结构组成" class="headerlink" title="MySQL 体系结构组成"></a>MySQL 体系结构组成</h2><p><img src="/images/MySQL_ architecture.png" alt="MySQL 体系结构图"></p><h3 id="Connectors：外部语言与SQL交互的入口"><a href="#Connectors：外部语言与SQL交互的入口" class="headerlink" title="Connectors：外部语言与SQL交互的入口"></a>Connectors：外部语言与SQL交互的入口</h3><h3 id="Management-Serveices-amp-Utilities：系统管理和控制工具"><a href="#Management-Serveices-amp-Utilities：系统管理和控制工具" class="headerlink" title="Management Serveices &amp; Utilities：系统管理和控制工具"></a>Management Serveices &amp; Utilities：系统管理和控制工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">日常的 MySQL 管理工具。包括备份恢复、MySQL复制、集群等。</div></pre></td></tr></table></figure><h3 id="Connection-Pool：连接池"><a href="#Connection-Pool：连接池" class="headerlink" title="Connection Pool：连接池"></a>Connection Pool：连接池</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">管理缓冲用户连接、用户名、密码、权限校验,线程处理等需要缓存的需求。</div><div class="line">生成线程，验证用户是否正确，保持连接会话队列。</div></pre></td></tr></table></figure><h3 id="SQL-Interface：SQL-接口"><a href="#SQL-Interface：SQL-接口" class="headerlink" title="SQL Interface：SQL 接口"></a>SQL Interface：SQL 接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">接受处理SQL语句接口。返回查询或执行结果。</div></pre></td></tr></table></figure><h3 id="Parser：解析器"><a href="#Parser：解析器" class="headerlink" title="Parser：解析器"></a>Parser：解析器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将 SQL 进行验证和解析以便MySQL优化器可以识别的数据结构或返回 SQL 语句的错误。</div></pre></td></tr></table></figure><h3 id="Optimizer：查询优化器"><a href="#Optimizer：查询优化器" class="headerlink" title="Optimizer：查询优化器"></a>Optimizer：查询优化器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">使用查询优化器对查询进行优化，同时会验证用户是否有权限进行查询，缓存中是否有可用的最新数据。使用的是“选取-投影- 联接”策略进行查询。</div><div class="line">选取：根据Where条件选定特定的行。</div><div class="line">投影：提取Select查询的列。</div><div class="line">连接：多表连接策略。根据Where筛选数据，然后取出列，最后组合。</div></pre></td></tr></table></figure><h3 id="Cache-和-Buffer：查询缓存"><a href="#Cache-和-Buffer：查询缓存" class="headerlink" title="Cache 和 Buffer：查询缓存"></a>Cache 和 Buffer：查询缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">高速缓冲区。(Innodb buffer pool_size)。缓存数据、索引、数据字典、自适应HASH等数据。如果查询缓存有命中的查询结果,查询语句就可以直接去查询缓存中取数据。通过 LRU算法将数据的冷端溢出,未来得及刷新到磁盘的数据页,叫脏页。</div></pre></td></tr></table></figure><h3 id="Pluggable-Storage-Engine：插件式存储引擎"><a href="#Pluggable-Storage-Engine：插件式存储引擎" class="headerlink" title="Pluggable Storage Engine：插件式存储引擎"></a>Pluggable Storage Engine：插件式存储引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MySQL 是数据库环境框架，其引擎采用插件方式实现。引擎是与文件打交道的子系统,它负责将数据是以某 种数据结构放到磁盘,某种算法来提取数据等(包括MVCC、锁实现,crash recovery等)。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL-体系结构概述&quot;&gt;&lt;a href=&quot;#MySQL-体系结构概述&quot; class=&quot;headerlink&quot; title=&quot;MySQL 体系结构概述&quot;&gt;&lt;/a&gt;MySQL 体系结构概述&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL 执行计划详细解读</title>
    <link href="http://yoursite.com/2017/10/13/MySQL_explain/"/>
    <id>http://yoursite.com/2017/10/13/MySQL_explain/</id>
    <published>2017-10-13T01:06:56.886Z</published>
    <updated>2017-10-13T01:55:57.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EXPLAIN-DESC-用法"><a href="#EXPLAIN-DESC-用法" class="headerlink" title="EXPLAIN/DESC 用法"></a>EXPLAIN/DESC 用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">explain/desc select ...</div><div class="line">explain/desc partitions select ...</div><div class="line">explain/desc extends select ...</div><div class="line">explain/desc format=json select ...</div></pre></td></tr></table></figure><h2 id="EXPLAIN-输出列名词解释"><a href="#EXPLAIN-输出列名词解释" class="headerlink" title="EXPLAIN 输出列名词解释"></a>EXPLAIN 输出列名词解释</h2><h3 id="id："><a href="#id：" class="headerlink" title="id："></a>id：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select查询的序列号：</div><div class="line">  如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</div><div class="line">  id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</div></pre></td></tr></table></figure><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type:"></a>select_type:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select查询的类型，主要是区别普通查询和联合查询、子查询之类的复杂查询：</div><div class="line">  SIMPLE：查询中不包含子查询或者UNION；</div><div class="line">  查询中若包含任何复杂的子部分，最外层查询则被标记为：PRIMARY；</div><div class="line">  在SELECT或WHERE列表中包含了子查询，该子查询被标记为：SUBQUERY；</div><div class="line">  在FROM列表中包含的子查询被标记为：DERIVED（衍生）；</div><div class="line">  若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在 FROM子句的子查询中，外层SELECT将被标记为：DERIVED；</div><div class="line">  从UNION表获取结果的SELECT被标记为：UNION RESULT。</div></pre></td></tr></table></figure><h3 id="table："><a href="#table：" class="headerlink" title="table："></a>table：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表示查询涉及的表或衍生表</div></pre></td></tr></table></figure><h3 id="partitions："><a href="#partitions：" class="headerlink" title="partitions："></a>partitions：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">针对MySQL内置分区表，表示当前使用了哪些子分区；用于确认查询对分区的过滤效率</div></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type:"></a>type:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL ，一般来说，得保证查询至少达到range级别，最好能达到ref：</div><div class="line">  ALL：表示”全表扫描”(full table scan), 性能是最差的几种查询之一，如果查询的表比较大，且查询频次高，对MySQL数据库有致命的性能影响</div><div class="line">  index：表示“全索引扫描”(full index scan)，其类型和ALL较类似，性能也是比较差; 和ALL区别在于只对索引树进行扫描，但索引没有起到过滤作用</div><div class="line">  range：表示“索引范围扫描”， 通过索引字段范围获取表中部分数据记录； 常常用于<span class="keyword">in</span>,&gt;,&lt; between等操作，查询效率一般不错</div><div class="line">  index_merge：查询优化器发现查询可以同时使用多个索引查询结果集进行并集或交集的情况，就会使用index_merge <span class="built_in">type</span></div><div class="line">  ref: 针对于非唯一或主键索引，或使用二者”最左部分字段”索引的等值查询或多表join，查询效率由这个值返回的行数多少决定</div><div class="line">  eq_ref：使用于多表的join时，被驱动表的过滤字段是主键或唯一索引，查询效率很好</div><div class="line">  const：针对主键或唯一索引的等值查询扫描，最多只返回一行数据</div><div class="line">  system：是一种特殊const类型，被查询表中有且只有一条数据</div><div class="line">  NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引</div></pre></td></tr></table></figure><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys:"></a>possible_keys:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">指出MySQL能使用哪个索引在该表中找到行，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用。如果是空的，没有相关的索引。这时要提高性能，可通过检验WHERE子句，看是否引用某些字段，或者检查字段不是适合索引。</div><div class="line">  表示MySQL查询优化器发现当前查询可能被使用地索引，但不一定能会利用，如果possible_key的列举的索引越多，往往说明索引创建不合理，查询效率不是最高效；</div><div class="line">  因为优化器会分析尽可能多的索引，评估哪个索引的“成本”消耗局部最低，这个评估过程消耗时间和资源的。</div></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key :"></a>key :</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">显示MySQL实际决定使用的键。如果没有索引被选择，键是NULL。</div><div class="line">  表示查询优化器真正使用的索引(可能多个，如前index_merge), 如果是索引覆盖，那么索引不会在possible_keys中出现的; 注意：对于组合索引，查询可能只使用其部分字段，详细见下面key_len计算分析</div></pre></td></tr></table></figure><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len:"></a>key_len:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">显示MySQL决定使用的键长度。表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。如果键是NULL，长度就是NULL。文档提示特别注意这个值可以得出一个多重主键里mysql实际使用了哪一部分。注：key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</div><div class="line">key_len：表示查询优化器使用了索引的字节数，可以评估组合索引是否完全被使用，或只有最左部分字段使用。</div><div class="line">key_len字节的计算规则：</div><div class="line">  字符串：char(n) - n字节， varchar(n)- n字节 + 2字节(变长), 多字节charset * [1~4]字节（latin1为1字节，gbk为2字节，utf8为3字节，utf8mb4为4字节计算）</div><div class="line">  数值类型： TINYINT-1字节，SMALLINT-2字节， MEDIUMINT-3字节， INT-4字节，BIGINT-8字节</div><div class="line">  时间类型：DATE-3字节， TIMESTAMP-4字节， DATETIME-8字节</div><div class="line">  字段属性：NULL属性+ 1字节</div></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">显示哪个字段或常数与key一起被使用</div></pre></td></tr></table></figure><h3 id="rows"><a href="#rows" class="headerlink" title="rows:"></a>rows:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这个数表示mysql要遍历多少数据才能找到，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数，在innodb上可能是不准确的。</div><div class="line">  MySQL 查询优化器根据统计信息，估算SQL要查找到结果集需要扫描读取的数据行数; 这个值非常直观显示SQL的效率好坏，原则 rows 越少越好。</div></pre></td></tr></table></figure><h3 id="extra："><a href="#extra：" class="headerlink" title="extra："></a>extra：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">extra列返回的描述的意义：</div><div class="line">   Distinct ：一旦 MySQL 找到了与行相联合匹配的行，就不再搜索了。</div><div class="line">   Not exists ：MySQL 优化了 LEFT JOIN，一旦它找到了匹配 LEFT JOIN 标准的行，就不再搜索了。</div><div class="line">   Range checked <span class="keyword">for</span> each Record（index map:<span class="comment">#) ：没有找到理想的索引，因此对从前面表中来的每一个行组合，MySQL 检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一。</span></div><div class="line">   Using filesort ：看到这个的时候，查询就需要优化了。MySQL 需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。</div><div class="line">   Using index ：列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候。</div><div class="line">   Using temporary ：看到这个的时候，查询需要优化了。这里，MySQL 需要创建一个临时表来存储结果，这通常发生在对不同的列集进行 ORDER BY上，而不是 GROUP BY 上。</div><div class="line">   Where used ：使用了 WHERE 从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型 ALL 或 index，这就会发生，或者是查询有问题。</div><div class="line">   Using join buffer：该值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</div><div class="line">   Impossible <span class="built_in">where</span>：这个值强调了 <span class="built_in">where</span> 语句会导致没有符合条件的行。</div><div class="line">   Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行。</div><div class="line">   Using <span class="built_in">where</span>:列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示 MySQL 服务器将在存储引擎检索行后再进行过滤。</div><div class="line">   Using sort_union(...), Using union(...), Using intersect(...):这些函数说明如何为 index_merge 联接类型合并索引扫描。</div><div class="line">   注释：</div><div class="line">   Using sort_union：用两个或者两个以上的 key 提取数据，但优化器无法确保每个 key 会提取到一个自然排好序的结果，所以为了排除多余的数据，需要额外的处理。</div><div class="line">     例如，customer的state，（lname，fname）是 key，但 lname 不是key，SELECT COUNT(*) FROM customer WHERE (lname = ‘Jones<span class="string">') OR (state = ‘UT'</span>)，由于lname上面没有key，所以使用（lname，fname），使得结果可能不按照顺序，优化器需要额外的一些工作。</div><div class="line">   Using union：用两个或者两个以上的key提取数据，分别取得结果是已排序，通过合并就可以获得正确结果。</div><div class="line">     例如，customer中的state和（lname，fname）是 key，SELECT COUNT(state) FROM customer WHERE (lname = ‘Jones<span class="string">' AND fname='</span>John<span class="string">') OR (state = ‘UT'</span>)。</div><div class="line">   Using intersect：用两个或者两个以上的 key 提取数据，分别取得结果是已排序，通过求交就可以获得正确结果。</div><div class="line">     例如，customer中的state和（lname，fname）是 key，SELECT COUNT(state) FROM customer WHERE (lname = ‘Jones<span class="string">' AND fname='</span>John<span class="string">') AND (state = ‘UT'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EXPLAIN-DESC-用法&quot;&gt;&lt;a href=&quot;#EXPLAIN-DESC-用法&quot; class=&quot;headerlink&quot; title=&quot;EXPLAIN/DESC 用法&quot;&gt;&lt;/a&gt;EXPLAIN/DESC 用法&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL 数据库开发与设计规范</title>
    <link href="http://yoursite.com/2017/10/12/MySQL_design_specifications/"/>
    <id>http://yoursite.com/2017/10/12/MySQL_design_specifications/</id>
    <published>2017-10-12T12:52:02.436Z</published>
    <updated>2017-10-13T03:07:59.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="库名、表名、字段名必须统一使用小写或者大写字母，禁止混合使用，并采用下划线分割"><a href="#库名、表名、字段名必须统一使用小写或者大写字母，禁止混合使用，并采用下划线分割" class="headerlink" title="库名、表名、字段名必须统一使用小写或者大写字母，禁止混合使用，并采用下划线分割"></a>库名、表名、字段名必须统一使用小写或者大写字母，禁止混合使用，并采用下划线分割</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MySQL 配置参数 lower_case_table_names=1，即库表名以小写存储，大小写不敏感。如果是0，则库表名以实际情况存储，大小写敏感；如果是2，以实际情况存储，但以小写比较；</div><div class="line">如果大小写混合使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱；</div><div class="line">字段名显示区分大小写，但实际使⽤时不区分，即不可以建立两个名字一样但大小写不一样的字段；</div><div class="line">为了统一规范， 库名、表名、字段名使用小写字母。</div></pre></td></tr></table></figure><h3 id="库名以d开头，表名以t开头，字段名以f-开头（只作为参考，但必须统一命名标准）"><a href="#库名以d开头，表名以t开头，字段名以f-开头（只作为参考，但必须统一命名标准）" class="headerlink" title="库名以d开头，表名以t开头，字段名以f_开头（只作为参考，但必须统一命名标准）"></a>库名以d开头，表名以t开头，字段名以f_开头（只作为参考，但必须统一命名标准）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">比如表 t_crm_relation，中间的 crm 代表业务模块名；</div><div class="line">视图以view_开头，事件以event_开头，触发器以trig_开头，存储过程以proc_开头，函数以func_开头；</div><div class="line">普通索引以 idx_col1_col2 命名，唯一索引以uk_col1_col2命名（可去掉f_公共部分）。如 idx_companyid_corpid_contacttime(f_company_id,f_corp_id,f_contact_time)。</div></pre></td></tr></table></figure><h3 id="库名、表名、字段名必须见名知意。命名与业务、产品线等相关联，禁止使用MySQL保留字禁止在MySQL中进行数学运算和函数运算"><a href="#库名、表名、字段名必须见名知意。命名与业务、产品线等相关联，禁止使用MySQL保留字禁止在MySQL中进行数学运算和函数运算" class="headerlink" title="库名、表名、字段名必须见名知意。命名与业务、产品线等相关联，禁止使用MySQL保留字禁止在MySQL中进行数学运算和函数运算"></a>库名、表名、字段名必须见名知意。命名与业务、产品线等相关联，禁止使用MySQL保留字禁止在MySQL中进行数学运算和函数运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当库名、表名、字段名等属性含有保留字时，SQL语句必须用反引号引用属性名称，这将使得SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</div></pre></td></tr></table></figure><h3 id="库名、表名、字段名禁止超过32个字符"><a href="#库名、表名、字段名禁止超过32个字符" class="headerlink" title="库名、表名、字段名禁止超过32个字符"></a>库名、表名、字段名禁止超过32个字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过20个字符。</div></pre></td></tr></table></figure><h3 id="临时库、表名必须以tmp为前缀，并以日期为后缀"><a href="#临时库、表名必须以tmp为前缀，并以日期为后缀" class="headerlink" title="临时库、表名必须以tmp为前缀，并以日期为后缀"></a>临时库、表名必须以tmp为前缀，并以日期为后缀</h3><h3 id="备份库、表必须以bak为前缀，并以日期为后缀"><a href="#备份库、表必须以bak为前缀，并以日期为后缀" class="headerlink" title="备份库、表必须以bak为前缀，并以日期为后缀"></a>备份库、表必须以bak为前缀，并以日期为后缀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这也是为将来有可能分表做准备的，比如 t_crm_ec_record_201403，但像 t_crm_contact_at201506 就打破了这种规范。</div><div class="line">不具有时间特性的，直接以 t_tbname_001 这样的方式命名。</div></pre></td></tr></table></figure><h3 id="按日期时间分表须符合-YYYY-MM-DD-格式"><a href="#按日期时间分表须符合-YYYY-MM-DD-格式" class="headerlink" title="按日期时间分表须符合_YYYY[MM][DD]格式"></a>按日期时间分表须符合_YYYY[MM][DD]格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如 t_crm_relation_tmp0425。备份表也类似，形如 _bak20160425。</div></pre></td></tr></table></figure><h2 id="库表基础规范"><a href="#库表基础规范" class="headerlink" title="库表基础规范"></a>库表基础规范</h2><h3 id="表使用InnoDB存储引擎"><a href="#表使用InnoDB存储引擎" class="headerlink" title="表使用InnoDB存储引擎"></a>表使用InnoDB存储引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MySQL 5.5版本开始MySQL默认存储引擎就是InnoDB，MySQL 5.7版本开始，系统表开始弃用 MyISAM 引擎。</div></pre></td></tr></table></figure><h3 id="库、表字符集统一使用UTF8，必要时遇-EMOJ-等表情字符需求使用-UTF8MB4"><a href="#库、表字符集统一使用UTF8，必要时遇-EMOJ-等表情字符需求使用-UTF8MB4" class="headerlink" title="库、表字符集统一使用UTF8，必要时遇 EMOJ 等表情字符需求使用 UTF8MB4"></a>库、表字符集统一使用UTF8，必要时遇 EMOJ 等表情字符需求使用 UTF8MB4</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UTF8字符集存储汉字占用3个字节，存储英文字符占用一个字节；</div><div class="line">校对字符集使用默认的 utf8_general_ci；</div><div class="line">连接的客户端也使用 UTF8，建立连接时指定 charset 或 SET NAMES UTF8;</div><div class="line">如果遇到EMOJ等表情符号的存储需求，可申请使用 UTF8MB4 字符集。</div></pre></td></tr></table></figure><h3 id="所有表、列都需要添加注释"><a href="#所有表、列都需要添加注释" class="headerlink" title="所有表、列都需要添加注释"></a>所有表、列都需要添加注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">尽量给字段也添加注释。类 status 型需指明主要值的含义，如“0-离线，1-在线”。</div></pre></td></tr></table></figure><h3 id="控制单表字段数量，单表字段数上限20"><a href="#控制单表字段数量，单表字段数上限20" class="headerlink" title="控制单表字段数量，单表字段数上限20"></a>控制单表字段数量，单表字段数上限20</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">单表字段数上限20左右，再多的话考虑垂直分表。1、冷热数据分离；2、大字段分离；3、常在一起做条件和返回列的不分离。</div><div class="line">表字段控制少而精，可以提高IO效率，内存缓存更多有效数据，从而提高响应速度和并发能力，后续 alter table 也更快。</div></pre></td></tr></table></figure><h3 id="所有-InooDB-表都必须显式指定主键，推荐使用-UNSIGNED-自增列作为主键，禁止使用-UUID、MD5、HASH、字符串列作为主键以及多字段复合主键"><a href="#所有-InooDB-表都必须显式指定主键，推荐使用-UNSIGNED-自增列作为主键，禁止使用-UUID、MD5、HASH、字符串列作为主键以及多字段复合主键" class="headerlink" title="所有 InooDB 表都必须显式指定主键，推荐使用 UNSIGNED 自增列作为主键，禁止使用 UUID、MD5、HASH、字符串列作为主键以及多字段复合主键"></a>所有 InooDB 表都必须显式指定主键，推荐使用 UNSIGNED 自增列作为主键，禁止使用 UUID、MD5、HASH、字符串列作为主键以及多字段复合主键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">主键尽量采用自增方式，InnoDB 表实际是一棵索引组织表，顺序存储可以提高存取效率，充分利用磁盘空间。还有对一些复杂查询可能需要自连接来优化时需要用到。</div><div class="line">需要全局唯一主键时，使用外部发号器 ticket server（建设中）。</div><div class="line">如果没有主键或唯一索引，update/delete 是通过所有字段来定位操作的行，相当于每行就是一次全表扫描。</div><div class="line">少数情况可以使用联合唯一主键，需与DBA协商。</div></pre></td></tr></table></figure><h3 id="避免使用存储过程、视图，禁止使用触发器以及事件"><a href="#避免使用存储过程、视图，禁止使用触发器以及事件" class="headerlink" title="避免使用存储过程、视图，禁止使用触发器以及事件"></a>避免使用存储过程、视图，禁止使用触发器以及事件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">存储过程（procedure）虽然可以简化业务端代码，在传统企业写复杂逻辑时可能会用到，而在互联网企业变更是很频繁的，在分库分表的情况下要升级一个存储过程相当麻烦。又因为它是不记录<span class="built_in">log</span>的，所以也不方便debug性能问题。</div><div class="line">如果使用过程，一定考虑如果执行失败的情况；</div><div class="line">  使用视图一定程度上也是为了降低代码里SQL的复杂度，但有时候为了视图的通用性会损失性能（比如返回不必要的字段）；</div><div class="line">  触发器（trigger）也是同样，但也不应该通过它去约束数据的强一致性，MySQL只支持“基于行的触发”，也就是说，触发器始终是针对一条记录的，而不是针对整个sql语句的，如果变更的数据集非常大的话，效率会很低。掩盖一条</div><div class="line">SQL背后的工作，一旦出现问题将是灾难性的，但又很难快速分析和定位。再者需要ddl时无法使用 PT-OSC 工具。放在 transaction 执行；</div><div class="line">事件（event）也是一种偷懒的表现，目前已经遇到数次由于定时任务执行失败影响业务的情况，而且MySQL无法对它做失败预警。建立专门的 job scheduler 平台。</div></pre></td></tr></table></figure><h3 id="禁止使用外键参考"><a href="#禁止使用外键参考" class="headerlink" title="禁止使用外键参考"></a>禁止使用外键参考</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">即使2个表的字段有明确的外键参考关系，也不使用 FOREIGN KEY ，因为新纪录会去主键表做校验，影响性能。</div><div class="line">外键会导致父表和子表之间耦合，十分影响SQL性能，出现过多的锁等待，甚至会造成死锁。</div></pre></td></tr></table></figure><h3 id="单表数据量控制在1500w范围以内，超过1500w考虑表分区等优化措施"><a href="#单表数据量控制在1500w范围以内，超过1500w考虑表分区等优化措施" class="headerlink" title="单表数据量控制在1500w范围以内，超过1500w考虑表分区等优化措施"></a>单表数据量控制在1500w范围以内，超过1500w考虑表分区等优化措施</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">做好数据评估，建议纯INT数据不超过1500万，含有 CHAR 或者 VARCHAR 数据的不要超过1000万。字段类型在满足需求条件下越小越好，尽量使用 UNSIGNED 存储非负整数，因为实际使用时候存储负数的场景不多。</div></pre></td></tr></table></figure><h2 id="字段规范"><a href="#字段规范" class="headerlink" title="字段规范"></a>字段规范</h2><h3 id="优先选择符合存储需要的最小的数据类型"><a href="#优先选择符合存储需要的最小的数据类型" class="headerlink" title="优先选择符合存储需要的最小的数据类型"></a>优先选择符合存储需要的最小的数据类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TINYINT(4)：带符号的范围是-128到127。无符号的范围是0到255</div><div class="line">SMALLINT(6)：带符号的范围是-32768到32767。无符号的范围是0到65535</div><div class="line">MEDIUMINT(9)：带符号的范围是 -8388608到8388607。无符号的范围是0到 16777215</div><div class="line">INT(11)：带符号的范围是 -2147483648 到 2147483647。无符号的范围是0到 4294967295</div><div class="line">BIGINT(20)：带符号的范围是 -9223372036854775808 到 9223372036854775807。无符号的范围是0到 18446744073709551615</div><div class="line">TINYINT(1) 和 TINYINT(4) 中的1和4并不表示存储长度，只有字段指定zerofill是有用，如tinyint(4)，如果实际值是2，如果列指定了zerofill，查询结果就是0002，左边用0来填充</div></pre></td></tr></table></figure><h3 id="对于非负型的数据来说，要有限使用无符号整型来存储"><a href="#对于非负型的数据来说，要有限使用无符号整型来存储" class="headerlink" title="对于非负型的数据来说，要有限使用无符号整型来存储"></a>对于非负型的数据来说，要有限使用无符号整型来存储</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">同样的字节数，非负存储的数值范围更大。如TINYINT有符号为 -128-127，无符号为0-255</div></pre></td></tr></table></figure><h3 id="char、varchar、text等字符串类型定义"><a href="#char、varchar、text等字符串类型定义" class="headerlink" title="char、varchar、text等字符串类型定义"></a>char、varchar、text等字符串类型定义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">对于长度基本固定的列，如果该列恰好更新又特别频繁，适合 char</div><div class="line">varchar 虽然存储变长字符串，但不可太小也不可太大。UTF8 最多能存21844个汉字，或65532个英文</div><div class="line">varbinary(M) 保存的是二进制字符串，它保存的是字节而不是字符，所以没有字符集的概念，M长度0-255（字节）。只用于排序或比较时大小写敏感的类型，不包括密码存储</div><div class="line">TEXT类型与VARCHAR都类似，存储可变长度，最大限制也是2^16，但是它20bytes以后的内容是在数据页以外的空间存储（row_format=dynamic），对它的使用需要多一次寻址，没有默认值。</div><div class="line">一般用于存放容量平均都很大、操作没有其它字段那样频繁的值。</div><div class="line">网上部分文章说要避免使用text和blob，要知道如果纯用varchar可能会导致行溢出，效果差不多，但因为每行占用字节数过多，会导致 buffer_pool能 缓存的数据行、页下降。另外text和blob上面一般不会去建索引，而是利用 sphinx 之类的第三方全文搜索引擎，如果确实要创建（前缀）索引，那就会影响性能。凡事看具体场景。</div><div class="line">另外尽可能把 text/blob 拆到另一个表中</div><div class="line">BLOB可以看出 varbinary 的扩展版本，内容以二进制字符串存储，无字符集，区分大小写，有一种经常提但不用的场景：不要在数据库里存储图片。</div></pre></td></tr></table></figure><h3 id="尽可能把所有列定义为NOT-NULL"><a href="#尽可能把所有列定义为NOT-NULL" class="headerlink" title="尽可能把所有列定义为NOT NULL"></a>尽可能把所有列定义为NOT NULL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">对表的每一行，每个为 NULL 的列都需要额外的空间来标识。</div><div class="line">B树索引时不会存储 NULL 值，所以如果索引字段可以为NULL，索引效率会下降。建议用0、特殊值或空串代替NULL值。</div><div class="line">如果是索引字段，一定要定义为 NOT NULL 。因为 NULL 值会影响 CORDINATE 统计，影响优化器对索引的选择</div><div class="line">如果不能保证INSERT时一定有值过来，定义时使用 DEFAULT <span class="string">' '</span>，或0。</div></pre></td></tr></table></figure><h3 id="使用-TIMESTAMP-或-DATETIME-类型存储时间"><a href="#使用-TIMESTAMP-或-DATETIME-类型存储时间" class="headerlink" title="使用 TIMESTAMP 或 DATETIME 类型存储时间"></a>使用 TIMESTAMP 或 DATETIME 类型存储时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DATETIME 和 TIMESTAMP 都是精确到秒，优先选择 TIMESTAMP，因为 TIMESTAMP 只有4个字节，而DATETIME占用8个字节。同时 TIMESTAMP 具有自动赋值以及自动更新的特性：</div><div class="line">创建新记录和修改记录修改现有记录的时候都对这个数据列刷新：</div><div class="line">TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</div><div class="line">创建新记录的时候把这个字段设置为当前时间，但以后修改时，不再刷新它：</div><div class="line">TIMESTAMP  DEFAULT CURRENT_TIMESTAMP</div><div class="line">创建新记录的时候把这个字段设置为0，以后修改时刷新它：</div><div class="line">TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</div><div class="line">创建新记录的时候把这个字段设置为给定值，以后修改时刷新它：</div><div class="line">TIMESTAMP DEFAULT <span class="string">'yyyy-mm-dd hh:mm:ss'</span> ON UPDATE CURRENT_TIMESTAMP</div></pre></td></tr></table></figure><h3 id="使用INT-UNSIGNED存储IPV4"><a href="#使用INT-UNSIGNED存储IPV4" class="headerlink" title="使用INT UNSIGNED存储IPV4"></a>使用INT UNSIGNED存储IPV4</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通常使用 VARCHAR(15) 或者 CHAR(15) 保存IP地址，其实IP地址是无符号的32位整数，不是字符串，小数点仅仅为了可读性。MySQL提供了 INET_ATON() 、NET_NTOA()用于IP地址和整数之前转换</div></pre></td></tr></table></figure><h3 id="强烈建议使用-TINYINT-来代替枚举-ENUM-类型"><a href="#强烈建议使用-TINYINT-来代替枚举-ENUM-类型" class="headerlink" title="强烈建议使用 TINYINT 来代替枚举 ENUM 类型"></a>强烈建议使用 TINYINT 来代替枚举 ENUM 类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ENUM 类型在需要修改或增加枚举值时，需要在线 DDL，成本较高；ENUM列值如果含有数字类型，可能会引起默认值混淆。</div></pre></td></tr></table></figure><h3 id="使用-VARBINARY-存储大小写敏感的变长字符串或二进制内容"><a href="#使用-VARBINARY-存储大小写敏感的变长字符串或二进制内容" class="headerlink" title="使用 VARBINARY 存储大小写敏感的变长字符串或二进制内容"></a>使用 VARBINARY 存储大小写敏感的变长字符串或二进制内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VARBINARY 默认不区分大小写，没有字符集概念，速度快</div></pre></td></tr></table></figure><h3 id="同一意义的字段定义必须相同"><a href="#同一意义的字段定义必须相同" class="headerlink" title="同一意义的字段定义必须相同"></a>同一意义的字段定义必须相同</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">比如不同表中都有 user_id 字段，那么它的类型、字段长度、字符集、字符集顺序要设计成一样</div></pre></td></tr></table></figure><h3 id="禁止在数据库中存储明文密码"><a href="#禁止在数据库中存储明文密码" class="headerlink" title="禁止在数据库中存储明文密码"></a>禁止在数据库中存储明文密码</h3><h3 id="尽可能不使用TEXT、BLOB类型"><a href="#尽可能不使用TEXT、BLOB类型" class="headerlink" title="尽可能不使用TEXT、BLOB类型"></a>尽可能不使用TEXT、BLOB类型</h3><h3 id="用-DECIMAL-代替-FLOAT-和-DOUBLE-存储精确浮点数，同财务相关的金额类型数据必须使用DECIMAL类型"><a href="#用-DECIMAL-代替-FLOAT-和-DOUBLE-存储精确浮点数，同财务相关的金额类型数据必须使用DECIMAL类型" class="headerlink" title="用 DECIMAL 代替 FLOAT 和 DOUBLE 存储精确浮点数，同财务相关的金额类型数据必须使用DECIMAL类型"></a>用 DECIMAL 代替 FLOAT 和 DOUBLE 存储精确浮点数，同财务相关的金额类型数据必须使用DECIMAL类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">可以保证在浮点计算时，不丢失精度；</div><div class="line">decimal 占用空间有定义的宽度决定，（每4个字节可以存储9位数字，并且小数点也占用一个字节）；</div><div class="line">可用于存储比 BIGINT 更大的整数数据。</div></pre></td></tr></table></figure><h2 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h2><h3 id="任何新上线的-SELECT、UPDATE、DELETE，都需要-EXPLAIN，查看-SQL-的索引使用情况"><a href="#任何新上线的-SELECT、UPDATE、DELETE，都需要-EXPLAIN，查看-SQL-的索引使用情况" class="headerlink" title="任何新上线的 SELECT、UPDATE、DELETE，都需要 EXPLAIN，查看 SQL 的索引使用情况"></a>任何新上线的 SELECT、UPDATE、DELETE，都需要 EXPLAIN，查看 SQL 的索引使用情况</h3><h3 id="单表索引建议控制在5个以内，单复合索引字段数不允许超过5个"><a href="#单表索引建议控制在5个以内，单复合索引字段数不允许超过5个" class="headerlink" title="单表索引建议控制在5个以内，单复合索引字段数不允许超过5个"></a>单表索引建议控制在5个以内，单复合索引字段数不允许超过5个</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">字段超过5个时，实际已经起不到有效过滤数据的作用了。</div><div class="line">索引是双刃剑，会增加维护负担，增大IO压力，索引占用空间是成倍增加的</div><div class="line">单张表的索引数量控制在5个以内，或不超过表字段个数的20%。若单张表多个字段在查询需求上都要单独用到索引，需要经过DBA评估。</div></pre></td></tr></table></figure><h3 id="禁止索引的字段有-NULL值"><a href="#禁止索引的字段有-NULL值" class="headerlink" title="禁止索引的字段有 NULL值"></a>禁止索引的字段有 NULL值</h3><h3 id="InnoDB-单个索引中的字节数不超过-767（-MyISAM-引擎下为-1000）"><a href="#InnoDB-单个索引中的字节数不超过-767（-MyISAM-引擎下为-1000）" class="headerlink" title="InnoDB 单个索引中的字节数不超过 767（ MyISAM 引擎下为 1000）"></a>InnoDB 单个索引中的字节数不超过 767（ MyISAM 引擎下为 1000）</h3><h3 id="非唯一索引按照“IDX字段名称-字段名称-”进用行命名。唯一索引按照“UK字段名称-字段名称-”进用行命名"><a href="#非唯一索引按照“IDX字段名称-字段名称-”进用行命名。唯一索引按照“UK字段名称-字段名称-”进用行命名" class="headerlink" title="非唯一索引按照“IDX字段名称[字段名称]”进用行命名。唯一索引按照“UK字段名称[字段名称]”进用行命名"></a>非唯一索引按照“IDX<em>字段名称[</em>字段名称]”进用行命名。唯一索引按照“UK<em>字段名称[</em>字段名称]”进用行命名</h3><h3 id="避免建立冗余索引和重复索引"><a href="#避免建立冗余索引和重复索引" class="headerlink" title="避免建立冗余索引和重复索引"></a>避免建立冗余索引和重复索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InnoDB表是一棵索引组织表，主键是和数据放在一起的聚集索引，普通索引最终指向的是主键地址，所以把主键做最后一列是多余的。如f_crm_id作为主键，联合索引(f_user_id,f_crm_id)上的f_crm_id就完全多余</div><div class="line">(a,b,c)、(a,b)，后者为冗余索引。可以利用前缀索引来达到加速目的，减轻维护负担</div><div class="line">组合索引建议包含所有字段名，过长的字段名可以采用缩写形式</div></pre></td></tr></table></figure><h3 id="唯一键由3个以下字段组成，并且字段都是整形时，可使用唯一键作为主键。其他情况下，建议使用自增列或发号器作主键合理创建联合索引"><a href="#唯一键由3个以下字段组成，并且字段都是整形时，可使用唯一键作为主键。其他情况下，建议使用自增列或发号器作主键合理创建联合索引" class="headerlink" title="唯一键由3个以下字段组成，并且字段都是整形时，可使用唯一键作为主键。其他情况下，建议使用自增列或发号器作主键合理创建联合索引"></a>唯一键由3个以下字段组成，并且字段都是整形时，可使用唯一键作为主键。其他情况下，建议使用自增列或发号器作主键合理创建联合索引</h3><h3 id="选择区分度大的列建立索引。组合索引中，区分度大的字段放在最前"><a href="#选择区分度大的列建立索引。组合索引中，区分度大的字段放在最前" class="headerlink" title="选择区分度大的列建立索引。组合索引中，区分度大的字段放在最前"></a>选择区分度大的列建立索引。组合索引中，区分度大的字段放在最前</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不在低基数列上建立索引，例如性别、类型。但有一种情况，idx_feedbackid_type (f_feedback_id,f_type)，如果经常用 f_type=1 比较，而且能过滤掉90%行，那这个组合索引就值得创建。有时候同样的查询语句，由于条件取值不同导致使用不同的索引，也是这个道理。</div><div class="line">索引选择性计算方法（基数/数据行数）Selectivity = Cardinality / Total Rows = select count(distinct col1)/count(*) from tbname，越接近1说明col1上使用索引的过滤效果越好。</div><div class="line">走索引扫描行数超过30%时，改全表扫描。</div></pre></td></tr></table></figure><h3 id="对于频繁的查询优先考虑使用覆盖索引，避免Innodb表进行索引的二次查找"><a href="#对于频繁的查询优先考虑使用覆盖索引，避免Innodb表进行索引的二次查找" class="headerlink" title="对于频繁的查询优先考虑使用覆盖索引，避免Innodb表进行索引的二次查找"></a>对于频繁的查询优先考虑使用覆盖索引，避免Innodb表进行索引的二次查找</h3><h3 id="尽量不要在频繁更新的列上创建索引"><a href="#尽量不要在频繁更新的列上创建索引" class="headerlink" title="尽量不要在频繁更新的列上创建索引"></a>尽量不要在频繁更新的列上创建索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如不在定义了 ON UPDATE CURRENT_STAMP 的列上创建索引，维护成本太高（好在 MySQL 有 insert buffer，会合并索引的插入）</div></pre></td></tr></table></figure><h3 id="联表查询时，JOIN列的数据类型必须相同，并且要建立索引"><a href="#联表查询时，JOIN列的数据类型必须相同，并且要建立索引" class="headerlink" title="联表查询时，JOIN列的数据类型必须相同，并且要建立索引"></a>联表查询时，JOIN列的数据类型必须相同，并且要建立索引</h3><h3 id="不在低基数列上建立索引，比如性别列建立索引"><a href="#不在低基数列上建立索引，比如性别列建立索引" class="headerlink" title="不在低基数列上建立索引，比如性别列建立索引"></a>不在低基数列上建立索引，比如性别列建立索引</h3><h3 id="对字符串使用前缀索引，前缀索引长度不超过8个字符"><a href="#对字符串使用前缀索引，前缀索引长度不超过8个字符" class="headerlink" title="对字符串使用前缀索引，前缀索引长度不超过8个字符"></a>对字符串使用前缀索引，前缀索引长度不超过8个字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对超过30个字符长度的列创建索引时，考虑使用前缀索引，如 idx_cs_guid2 (f_cs_guid(26)) 表示截取前26个字符做索引，既可以提高查找效率，也可以节省空间；</div><div class="line">前缀索引也有它的缺点是，如果在该列上 ORDER BY 或 GROUP BY 时无法使用索引，也不能把它们用作覆盖索引(Covering Index)；</div><div class="line">如果在 varbinary 或 blob 这种以二进制存储的列上建立前缀索引，要考虑字符集，括号里表示的是字节数。</div></pre></td></tr></table></figure><h3 id="不对过长的-VARCHAR-或者-TXET-字段建立索引。建议优先考虑前缀索引，或添加-CRC32-或-MD5-伪列并建立索引"><a href="#不对过长的-VARCHAR-或者-TXET-字段建立索引。建议优先考虑前缀索引，或添加-CRC32-或-MD5-伪列并建立索引" class="headerlink" title="不对过长的 VARCHAR 或者 TXET 字段建立索引。建议优先考虑前缀索引，或添加 CRC32 或 MD5 伪列并建立索引"></a>不对过长的 VARCHAR 或者 TXET 字段建立索引。建议优先考虑前缀索引，或添加 CRC32 或 MD5 伪列并建立索引</h3><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql使用联合索引时，从左向右匹配，遇到断开或者范围查询时，无法用到后续的索引列</div><div class="line">比如索引 idx_c1_c2_c3 (c1,c2,c3)，相当于创建了(c1)、(c1,c2)、(c1,c2,c3)三个索引，<span class="built_in">where</span>条件包含上面三种情况的字段比较则可以用到索引，但像 <span class="built_in">where</span> c1=a and c3=c 只能用到c1列的索引，像 c2=b and c3=c等情况就完全用不到这个索引</div><div class="line">遇到范围查询(&gt;、&lt;、between、like)也会停止索引匹配，比如 c1=a and c2 &gt; 2 and c3=c，只有c1,c2列上的比较能用到索引，(c1,c2,c3)排列的索引才可能会都用上</div><div class="line"><span class="built_in">where</span>条件里面字段的顺序与索引顺序无关，mysql优化器会自动调整顺序</div></pre></td></tr></table></figure><h3 id="合理使用覆盖索引减少IO，避免排序"><a href="#合理使用覆盖索引减少IO，避免排序" class="headerlink" title="合理使用覆盖索引减少IO，避免排序"></a>合理使用覆盖索引减少IO，避免排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INNODB存储引擎中，secondary index(非主键索引，又称为辅助索引、二级索引)没有直接存储行地址，而是存储主键值。</div><div class="line">如果用户需要查询 secondary index 中所不包含的数据列，则需要先通过 secondary index 查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。覆盖索引则可以在一个索引中获取所有需要的数据列，从而避免回表进行二次查找，节省IO因此效率较高。</div><div class="line">例如 SELECT email，uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为 index(uid，email)，以获得性能提升</div></pre></td></tr></table></figure><h3 id="可以把随机I-O变为顺序I-O加快查询效率"><a href="#可以把随机I-O变为顺序I-O加快查询效率" class="headerlink" title="可以把随机I/O变为顺序I/O加快查询效率"></a>可以把随机I/O变为顺序I/O加快查询效率</h3><h2 id="SQL编码规范"><a href="#SQL编码规范" class="headerlink" title="SQL编码规范"></a>SQL编码规范</h2><h3 id="使用-prepared-statement，可以提升性能并避免SQL注入"><a href="#使用-prepared-statement，可以提升性能并避免SQL注入" class="headerlink" title="使用 prepared statement，可以提升性能并避免SQL注入"></a>使用 prepared statement，可以提升性能并避免SQL注入</h3><h3 id="禁止隐式转换。数值类型禁止加引号；字符串类型必须加引号"><a href="#禁止隐式转换。数值类型禁止加引号；字符串类型必须加引号" class="headerlink" title="禁止隐式转换。数值类型禁止加引号；字符串类型必须加引号"></a>禁止隐式转换。数值类型禁止加引号；字符串类型必须加引号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">两个参数至少有一个是 NULL 时，比较的结果也是 NULL，例外是使用 &lt;=&gt; 对两个 NULL 做比较时会返回 1，这两种情况都不需要做类型转换；</div><div class="line">两个参数都是字符串，会按照字符串来比较，不做类型转换；</div><div class="line">两个参数都是整数，按照整数来比较，不做类型转换；</div><div class="line">十六进制的值和非数字做比较时，会被当做二进制串；</div><div class="line">有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为 TIMESTAMP；</div><div class="line">有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较；</div><div class="line">所有其他情况下，两个参数都会被转换为浮点数再进行比较。如果一个索引建立在string类型上，如果这个字段和一个int类型的值比较。如f_phone定义的类型是varchar，但<span class="built_in">where</span>使用f_phone <span class="keyword">in</span> (098890)，两个参数都会被当成成浮点型。发生这个隐式转换并不是最糟的，最糟的是string转换后的<span class="built_in">float</span>，MySQL无法使用索引，这才导致了性能问题。如果是 f_user_id = ‘1234567’ 的情况,直接把数字当字符串比较。</div></pre></td></tr></table></figure><h3 id="减少与数据库交互次数，尽量采用批量SQL语句"><a href="#减少与数据库交互次数，尽量采用批量SQL语句" class="headerlink" title="减少与数据库交互次数，尽量采用批量SQL语句"></a>减少与数据库交互次数，尽量采用批量SQL语句</h3><h3 id="拆分复杂SQL为多个小SQL，避免大事务"><a href="#拆分复杂SQL为多个小SQL，避免大事务" class="headerlink" title="拆分复杂SQL为多个小SQL，避免大事务"></a>拆分复杂SQL为多个小SQL，避免大事务</h3><h3 id="获取大量数据时，建议分批次获取数据，每次获取数据少于2000条，结果集应小于1M"><a href="#获取大量数据时，建议分批次获取数据，每次获取数据少于2000条，结果集应小于1M" class="headerlink" title="获取大量数据时，建议分批次获取数据，每次获取数据少于2000条，结果集应小于1M"></a>获取大量数据时，建议分批次获取数据，每次获取数据少于2000条，结果集应小于1M</h3><h3 id="统计表中记录数时使用-COUNT-，而不是-COUNT-primary-key-和-COUNT-1-备注：仅针对-MyiSAM"><a href="#统计表中记录数时使用-COUNT-，而不是-COUNT-primary-key-和-COUNT-1-备注：仅针对-MyiSAM" class="headerlink" title="统计表中记录数时使用 COUNT(*)，而不是 COUNT(primary_key) 和 COUNT(1) 备注：仅针对 MyiSAM"></a>统计表中记录数时使用 COUNT(*)，而不是 COUNT(primary_key) 和 COUNT(1) 备注：仅针对 MyiSAM</h3><h3 id="SELECT只获取必要的字段，杜绝直接-SELECT-读取全部字段"><a href="#SELECT只获取必要的字段，杜绝直接-SELECT-读取全部字段" class="headerlink" title="SELECT只获取必要的字段，杜绝直接 SELECT * 读取全部字段"></a>SELECT只获取必要的字段，杜绝直接 SELECT * 读取全部字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">即使需要所有字段，减少网络带宽消耗，能有效利用覆盖索引，表结构变更对程序基本无影响</div></pre></td></tr></table></figure><h3 id="SQL中避免出现-now-、rand-、sysdate-、current-user-等不确定结果的函数"><a href="#SQL中避免出现-now-、rand-、sysdate-、current-user-等不确定结果的函数" class="headerlink" title="SQL中避免出现 now()、rand()、sysdate()、current_user()等不确定结果的函数"></a>SQL中避免出现 now()、rand()、sysdate()、current_user()等不确定结果的函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语句级复制场景下，引起主从数据不一致；不确定值的函数，产⽣生的SQL语句无法利用QUERY CACHE。</div></pre></td></tr></table></figure><h3 id="INSERT语句必须指定字段列表，禁止使用-INSERT-INTO-TABLE"><a href="#INSERT语句必须指定字段列表，禁止使用-INSERT-INTO-TABLE" class="headerlink" title="INSERT语句必须指定字段列表，禁止使用 INSERT INTO TABLE()"></a>INSERT语句必须指定字段列表，禁止使用 INSERT INTO TABLE()</h3><h3 id="禁止从库上执行后台管理和统计类功能的查询，必要时申请统计类从库"><a href="#禁止从库上执行后台管理和统计类功能的查询，必要时申请统计类从库" class="headerlink" title="禁止从库上执行后台管理和统计类功能的查询，必要时申请统计类从库"></a>禁止从库上执行后台管理和统计类功能的查询，必要时申请统计类从库</h3><h3 id="禁止UPDATE、DELETE语句使用LIMIT"><a href="#禁止UPDATE、DELETE语句使用LIMIT" class="headerlink" title="禁止UPDATE、DELETE语句使用LIMIT"></a>禁止UPDATE、DELETE语句使用LIMIT</h3><h3 id="程序应有捕获SQL异常的处理机制，必要时通过rollback显式回滚"><a href="#程序应有捕获SQL异常的处理机制，必要时通过rollback显式回滚" class="headerlink" title="程序应有捕获SQL异常的处理机制，必要时通过rollback显式回滚"></a>程序应有捕获SQL异常的处理机制，必要时通过rollback显式回滚</h3><h3 id="禁止使用反向查询，例如-not-in、not-like、not-exisits"><a href="#禁止使用反向查询，例如-not-in、not-like、not-exisits" class="headerlink" title="禁止使用反向查询，例如 not in、not like、not exisits"></a>禁止使用反向查询，例如 not in、not like、not exisits</h3><h3 id="禁止使用order-by-rand"><a href="#禁止使用order-by-rand" class="headerlink" title="禁止使用order by rand()"></a>禁止使用order by rand()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">低效：SELECT * FROM EMP ORDER BY RAND() LIMIT 1;</div><div class="line">高效：SELECT *</div><div class="line">         FROM EMP AS t1</div><div class="line">        JOIN (SELECT ROUND(RAND() *</div><div class="line">                     ((SELECT MAX(id) FROM EMP) - (SELECT MIN(id) FROM EMP)) +</div><div class="line">                     (SELECT MIN(id) FROM EMP)) AS id) AS t2</div><div class="line">        WHERE t1.id &gt;= t2.id</div><div class="line">        ORDER BY t1.id LIMIT 1;</div></pre></td></tr></table></figure><h3 id="禁止使用-前导查询，例如：like-‘-abc’，无法利用到索引"><a href="#禁止使用-前导查询，例如：like-‘-abc’，无法利用到索引" class="headerlink" title="禁止使用%前导查询，例如：like  ‘%abc’，无法利用到索引"></a>禁止使用%前导查询，例如：like  ‘%abc’，无法利用到索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">低效：SELECT e.ename FROM emp e  WHERE e.ename LIKE <span class="string">'%abc'</span>;</div><div class="line">高效：SELECT e.ename FROM emp e  WHERE e.ename LIKE <span class="string">'abc%'</span>;</div></pre></td></tr></table></figure><h3 id="避免使用JOIN和子查询。必要时推荐用JOIN代替子查询"><a href="#避免使用JOIN和子查询。必要时推荐用JOIN代替子查询" class="headerlink" title="避免使用JOIN和子查询。必要时推荐用JOIN代替子查询"></a>避免使用JOIN和子查询。必要时推荐用JOIN代替子查询</h3><h3 id="使用-IN-代替-OR；SQL语句中IN包含的值不应过多，应少于300个，否则使用转为字符串LIKE"><a href="#使用-IN-代替-OR；SQL语句中IN包含的值不应过多，应少于300个，否则使用转为字符串LIKE" class="headerlink" title="使用 IN 代替 OR；SQL语句中IN包含的值不应过多，应少于300个，否则使用转为字符串LIKE"></a>使用 IN 代替 OR；SQL语句中IN包含的值不应过多，应少于300个，否则使用转为字符串LIKE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">低效：SELECT * FROM location WHERE loc_id = 10 OR loc_id = 20 OR loc_id = 30;</div><div class="line">高效：SELECT * FROM location WHERE loc_id IN (10,20,30);</div></pre></td></tr></table></figure><h3 id="使用-gt-、-lt-等，避免使用-和-lt-gt-命令"><a href="#使用-gt-、-lt-等，避免使用-和-lt-gt-命令" class="headerlink" title="使用&gt;、&lt;等，避免使用!=和&lt;&gt;命令"></a>使用&gt;、&lt;等，避免使用!=和&lt;&gt;命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">低效：select * from employee <span class="built_in">where</span> salary &lt;&gt; 3000;</div><div class="line">高效：select * from employee <span class="built_in">where</span> salary &lt; 3000 or salary &gt; 3000;</div></pre></td></tr></table></figure><h3 id="使用-UNION-替换-OR-适用于索引列"><a href="#使用-UNION-替换-OR-适用于索引列" class="headerlink" title="使用 UNION 替换 OR(适用于索引列)"></a>使用 UNION 替换 OR(适用于索引列)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">低效：SELECT loc_id, loc_desc, region</div><div class="line">          FROM location</div><div class="line">         WHERE loc_id = 10 OR region = <span class="string">'MELBOURNE'</span>;</div><div class="line">高效：SELECT loc_id, loc_desc, region  </div><div class="line">          FROM location</div><div class="line">         WHERE loc_id = 10</div><div class="line">       UNION</div><div class="line">       SELECT loc_id, loc_desc, region</div><div class="line">          FROM location</div><div class="line">         WHERE region = <span class="string">'MELBOURNE'</span>;</div></pre></td></tr></table></figure><h3 id="在明显不会有重复值时使用UNION-ALL-代替UNION"><a href="#在明显不会有重复值时使用UNION-ALL-代替UNION" class="headerlink" title="在明显不会有重复值时使用UNION ALL 代替UNION"></a>在明显不会有重复值时使用UNION ALL 代替UNION</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">低效：SELECT ACCT_NUM, BALANCE_AMT</div><div class="line">          FROM DEBIT_TRANSACTIONS</div><div class="line">        WHERE TRAN_DATE = <span class="string">'31 - DEC - 95'</span></div><div class="line">       UNION</div><div class="line">       SELECT ACCT_NUM, BALANCE_AMT</div><div class="line">          FROM DEBIT_TRANSACTIONS</div><div class="line">         WHERE TRAN_DATE = <span class="string">'31 - DEC - 95'</span>;</div><div class="line">高效：SELECT ACCT_NUM, BALANCE_AMT</div><div class="line">          FROM DEBIT_TRANSACTIONS</div><div class="line">         WHERE TRAN_DATE = <span class="string">'31 - DEC - 95'</span></div><div class="line">       UNION ALL</div><div class="line">       SELECT ACCT_NUM, BALANCE_AMT</div><div class="line">          FROM DEBIT_TRANSACTIONS</div><div class="line">         WHERE TRAN_DATE = <span class="string">'31 - DEC - 95'</span>;</div></pre></td></tr></table></figure><h3 id="禁止在MySQL中对列进行数学运算"><a href="#禁止在MySQL中对列进行数学运算" class="headerlink" title="禁止在MySQL中对列进行数学运算"></a>禁止在MySQL中对列进行数学运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">低效：SELECT e.ename FROM emp e WHERE e.sal*1.1 &gt; 900;</div><div class="line">高效：SELECT e.ename FROM emp e WHERE e.sal &gt; 900/1.1;</div></pre></td></tr></table></figure><h3 id="禁止在MySQL中对列进行函数运算"><a href="#禁止在MySQL中对列进行函数运算" class="headerlink" title="禁止在MySQL中对列进行函数运算"></a>禁止在MySQL中对列进行函数运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">低效：SELECT e.ename</div><div class="line">          FROM emp e</div><div class="line">         WHERE DATE_FORMAT(e.date, ’%Y%m%d’) = <span class="string">'20160516'</span>;</div><div class="line">高效：SELECT e.ename</div><div class="line">          FROM emp e</div><div class="line">         WHERE e.date &gt; = STR_TO_DATE(<span class="string">'2016-05-16 00:00:01'</span>, <span class="string">'%Y-%m-%d %H:%i:%s'</span>)</div><div class="line">         AND e.date &lt; STR_TO_DATE(<span class="string">'2016-05-17 00:00:00'</span>, <span class="string">'%Y-%m-%d %H:%i:%s'</span>);</div></pre></td></tr></table></figure><h3 id="建议使用合理的分页方式以提高分页效率"><a href="#建议使用合理的分页方式以提高分页效率" class="headerlink" title="建议使用合理的分页方式以提高分页效率"></a>建议使用合理的分页方式以提高分页效率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">低效：SELECT e.ename FROM emp e <span class="built_in">limit</span> 10000,10;</div><div class="line">高效：SELECT e.ename FROM emp e  WHERE e.id &gt;=10000 <span class="built_in">limit</span> 10;</div></pre></td></tr></table></figure><h3 id="用EXISTS替换DISTINCT"><a href="#用EXISTS替换DISTINCT" class="headerlink" title="用EXISTS替换DISTINCT"></a>用EXISTS替换DISTINCT</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">低效: SELECT DISTINCT DEPT_NO,DEPT_NAME FROM DEPT D , EMP E</div><div class="line">         WHERE D.DEPT_NO = E.DEPT_NO</div><div class="line">高效: SELECT DEPT_NO,DEPT_NAME FROM DEPT D</div><div class="line">         WHERE  EXISTS</div><div class="line">           ( SELECT ‘X’ FROM EMP E WHERE E.DEPT_NO = D.DEPT_NO);</div></pre></td></tr></table></figure><h3 id="避免在索引列上使用-IS-NULL和-IS-NOT-NULL"><a href="#避免在索引列上使用-IS-NULL和-IS-NOT-NULL" class="headerlink" title="避免在索引列上使用 IS NULL和 IS NOT NULL"></a>避免在索引列上使用 IS NULL和 IS NOT NULL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">低效: SELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE IS NOT NULL;</div><div class="line">高效: SELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE &gt;=0;</div></pre></td></tr></table></figure><h2 id="数据库操作规范"><a href="#数据库操作规范" class="headerlink" title="数据库操作规范"></a>数据库操作规范</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">不允许在 DBA 不知情的情况下在线上数据库导数据，对数据库增、删、改以及操作一些复杂的查询；</div><div class="line">对于大表上线，需要 DBA 做详细的评估；</div><div class="line">大批量更新，如修复数据，避开高峰期，并通知DBA。直接执行 SQL 由DBA同事操作；</div><div class="line">及时处理已下线业务的 SQL、数据库和表；</div><div class="line">重要项目的数据库方案选型和设计必须提前通知 DBA 参与；</div><div class="line">提交线上的所有 DDL 需求，所有 SQL 语句都需要备注说明；</div><div class="line">所有新上线的表和 SQL 确定走索引后才能上线；</div><div class="line">表结构变更必须通知 DBA 进行审核；</div><div class="line">禁止有 DDL、DCL 权限的应用程序账号存在；</div><div class="line">批量导入、导出数据必须通过 DBA 审核，并在执行过程中观察服务；</div><div class="line">批量更新数据，如 UPDATE、DELETE 操作，必须 DBA 进行审核，并在执行过程中观察服务；</div><div class="line">产品出现非数据库导致的故障时，如被攻击，必须及时通 DBA，便于维护服务稳定；</div><div class="line">业务部门程序出现 BUG 等影响数据库服务的问题，必须及时通知 DBA，便于维护服务稳定；</div><div class="line">业务部门推广活动或上线新功能，必须提前通知 DBA 进行服务和访问量评估，并留出必要时间以便 DBA 完成扩容；</div><div class="line">出现业务部门人为误操作导致数据丢失，需要恢复数据的，必须第一时间通知 DBA，并提供准确时间点、 误操作语句等重要线索；</div><div class="line">提交线上建表改表需求，必须详细注明涉及到的所有 SQL 语句(包括INSERT、DELETE、UPDATE)，便于 DBA 进行审核和优化；</div><div class="line">对同一个表的多次 ALTER 操作必须合并为一次操作；</div><div class="line">禁止在 MySQL 数据库中存放业务逻辑；</div><div class="line">禁止在线上做数据库压力测试。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;h3 id=&quot;库名、表名、字段名必须统一使用小写或者大写字母，禁止混合使用，并采用下划线分割&quot;&gt;&lt;a href=&quot;#库名、表名、
      
    
    </summary>
    
    
  </entry>
  
</feed>
